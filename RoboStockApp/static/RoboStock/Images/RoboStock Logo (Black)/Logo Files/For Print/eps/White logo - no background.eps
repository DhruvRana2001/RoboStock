%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 867
%%HiResBoundingBox: 0 0 2391.1199 866.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 866.88 re
W
q
[0.24 0 0 -0.24 0 866.88] cm
q
0 0 9962.5 3612.5 re
W*
q
[30.461237 0 0 30.463451 246.54097 293.03256] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
71.567001 15.476 m
59.974998 0 l
19.417 29.243 l
35.77 29.243 l
71.567001 15.476 l
h
82.478996 29.243 m
77.853996 16.735001 l
43.141998 29.243 l
82.478996 29.243 l
h
84.913002 27.716 m
91.553001 27.716 l
93.452003 27.716 94.674004 29.195999 94.674004 31.088999 c
94.674004 52.286999 l
97.666 50.792 l
97.636002 29.494999 l
97.636002 27.594999 94.980003 24.664 93.080002 24.664 c
83.701004 24.664 l
84.761002 27.518 l
84.913002 27.716 l
h
94.674004 76.706001 m
94.674004 94.136002 l
96.406006 93.952003 97.719002 92.397003 97.719002 90.618004 c
97.695999 75.195007 l
94.674004 76.706001 l
h
7.939 27.716 m
8.374001 27.716 l
16.723 27.716 l
20.980999 24.664 l
11.014999 24.664 l
11.084 24.640999 l
3.711999 24.633999 1.46 24.717999 1.528999 33.889999 c
1.528999 95.93 l
1.528999 97.831001 3.422 99.448997 5.322 99.448997 c
88.500999 99.448997 l
90.400002 99.448997 92.308998 97.883995 92.308998 95.991997 c
92.301994 79.425995 l
91.934998 79.608994 l
84.304001 79.608994 l
77.557999 79.608994 72.093002 74.144997 72.093002 67.398994 c
72.093002 60.652992 77.557999 55.189995 84.304001 55.189995 c
91.934998 55.189995 l
92.292999 55.005997 l
92.284996 34.217995 l
92.284996 32.317993 90.399994 30.768995 88.500999 30.768995 c
11.008 30.768995 l
10.733001 30.761995 10.480001 30.745995 10.252001 30.707994 c
8.374 30.707994 l
7.534999 30.707994 6.848 30.019995 6.848 29.181995 c
6.848 28.486 7.306 27.899 7.939 27.716 c
h
91.934998 58.240002 m
84.304001 58.240002 l
79.243004 58.240002 75.146004 62.338001 75.146004 67.397003 c
75.146004 72.456001 79.244003 76.554001 84.304001 76.554001 c
91.934998 76.554001 l
97.672997 71.738998 l
97.650002 53.547001 l
91.934998 58.240002 l
h
79.724998 67.397003 m
79.724998 64.872002 81.778 62.820004 84.304001 62.820004 c
86.829002 62.820004 88.882004 64.872002 88.882004 67.397003 c
88.882004 69.923004 86.829002 71.976006 84.304001 71.976006 c
81.777 71.976997 79.724998 69.924004 79.724998 67.397003 c
h
f*
Q
q
[56.676113 0 0 56.680233 3705.7029 1131.49219] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
1.8262 4.941 m
4.7071 4.941 l
6.315173 4.941 7.405668 5.006104 7.978584 5.136313 c
8.837959 5.331625 9.537829 5.753174 10.078194 6.400961 c
10.618558 7.048748 10.888742 7.844647 10.888743 8.788661 c
10.888743 9.582932 10.703197 10.276291 10.332103 10.868739 c
9.961009 11.461187 9.428776 11.912021 8.735403 12.221239 c
8.04203 12.530458 7.441431 12.685082 6.933603 12.685109 c
11.084003 19.423409 l
9.306704 19.423409 l
5.156303 12.685108 l
3.271503 12.685108 l
3.271503 19.423409 l
1.826204 19.423409 l
1.826204 4.941408 l
1.8262 4.941 l
h
3.2715 6.357 m
3.2715 11.2789 l
5.7617 11.298431 l
6.725242 11.298431 7.43976 11.207286 7.905255 11.024994 c
8.37075 10.842702 8.732082 10.549732 8.989255 10.146084 c
9.246428 9.742436 9.375008 9.289968 9.374995 8.788684 c
9.374995 8.306913 9.243159 7.86746 8.979487 7.470325 c
8.715816 7.073189 8.372382 6.788359 7.949187 6.615834 c
7.525992 6.443309 6.816359 6.357046 5.820287 6.357044 c
3.271487 6.357044 l
3.2715 6.357 l
h
18.808598 8.203 m
20.455732 8.203 21.82292 8.798703 22.91016 9.990109 c
23.893232 11.083859 24.384769 12.376177 24.384769 13.867063 c
24.384769 15.357947 23.863935 16.661648 22.822269 17.778162 c
21.780603 18.894676 20.442703 19.452944 18.808569 19.452963 c
17.167944 19.452963 15.828425 18.894695 14.790014 17.778158 c
13.751603 16.661621 13.232403 15.357922 13.232414 13.867058 c
13.232414 12.382683 13.72395 11.09362 14.707024 9.99987 c
15.794263 8.801953 17.161451 8.202995 18.808586 8.202995 c
18.808598 8.203 l
h
18.808598 9.551 m
17.669275 9.551 16.689457 9.974176 15.869144 10.820531 c
15.048832 11.666885 14.638665 12.689018 14.638644 13.886931 c
14.638644 14.66167 14.825819 15.385954 15.200168 16.059782 c
15.574516 16.73361 16.080717 17.251177 16.718767 17.612482 c
17.356817 17.973787 18.053417 18.154451 18.808567 18.154472 c
19.576796 18.154472 20.278294 17.973808 20.913059 17.61248 c
21.547825 17.251152 22.050758 16.733585 22.42186 16.05978 c
22.792961 15.385975 22.978508 14.661675 22.9785 13.88688 c
22.9785 12.688963 22.568344 11.666828 21.748032 10.820474 c
20.927719 9.974119 19.947886 9.550953 18.808531 9.550974 c
18.808598 9.551 l
h
27.783224 17.3633 m
27.197287 16.386738 26.845724 15.426452 26.728537 14.482441 c
26.728537 7.705097 26.728537 4.322936 26.728537 4.335957 c
28.095737 4.335957 l
28.095737 10.312557 l
28.675165 9.602921 29.32295 9.073951 30.039097 8.725643 c
30.755243 8.377336 31.539743 8.203182 32.392597 8.203183 c
33.903015 8.203183 35.195332 8.753313 36.26955 9.853574 c
37.343769 10.953835 37.880871 12.288467 37.880852 13.857473 c
37.880852 15.400442 37.340488 16.718802 36.259758 17.812551 c
35.179028 18.906301 33.87693 19.453169 32.353458 19.453152 c
31.481062 19.453152 30.662378 19.285509 29.897404 18.950222 c
29.132429 18.614935 28.427664 18.085968 27.783104 17.363321 c
27.783224 17.3633 l
h
32.236324 18.1348 m
33.011063 18.1348 33.722328 17.94437 34.370113 17.563511 c
35.017899 17.182652 35.533867 16.653685 35.918015 15.976611 c
36.302162 15.299538 36.494221 14.576871 36.494186 13.808611 c
36.494186 13.053403 36.300503 12.329119 35.913132 11.635759 c
35.525761 10.9424 35.004929 10.4053 34.350632 10.02446 c
33.696335 9.64362 32.9981 9.45319 32.255932 9.45317 c
31.500723 9.45317 30.784578 9.6436 30.107494 10.024459 c
29.43041 10.405318 28.909578 10.922885 28.544994 11.577159 c
28.18041 12.231433 27.998117 12.962233 27.998114 13.769559 c
27.998114 15.013048 28.40827 16.05146 29.228582 16.884792 c
30.048895 17.718126 31.051495 18.134792 32.236382 18.134792 c
32.236324 18.1348 l
h
45.703129 8.203 m
47.350266 8.203 48.717453 8.798703 49.804691 9.990109 c
50.787766 11.083859 51.279301 12.376177 51.279301 13.867063 c
51.279301 15.357947 50.758469 16.661648 49.716801 17.778162 c
48.675133 18.894676 47.337234 19.452944 45.703102 19.452963 c
44.062477 19.452963 42.722958 18.894695 41.684547 17.778158 c
40.646137 16.661621 40.126934 15.357922 40.126945 13.867058 c
40.126945 12.382683 40.618481 11.09362 41.601555 9.99987 c
42.688793 8.801953 44.055981 8.202995 45.703117 8.202995 c
45.703129 8.203 l
h
45.703129 9.551 m
44.563805 9.551 43.583988 9.974176 42.763676 10.820531 c
41.943363 11.666885 41.533195 12.689018 41.533176 13.886931 c
41.533176 14.66167 41.720352 15.385954 42.0947 16.059782 c
42.469048 16.73361 42.97525 17.251177 43.6133 17.612482 c
44.25135 17.973787 44.947952 18.154451 45.703102 18.154472 c
46.471333 18.154472 47.172829 17.973808 47.807594 17.61248 c
48.44236 17.251152 48.945293 16.733585 49.316395 16.05978 c
49.687496 15.385975 49.873043 14.661675 49.873035 13.88688 c
49.873035 12.688963 49.462879 11.666828 48.642567 10.820474 c
47.822254 9.974119 46.842422 9.550953 45.703068 9.550974 c
45.703129 9.551 l
h
52.841797 16.494101 m
54.072296 15.75191 l
54.938183 17.346962 55.937531 18.144489 57.070343 18.144489 c
57.558624 18.144489 58.017609 18.030558 58.447296 17.802692 c
58.876984 17.574827 59.202503 17.272095 59.423855 16.894493 c
59.645206 16.516892 59.755882 16.113258 59.755886 15.683593 c
59.755886 15.201822 59.593124 14.726561 59.267605 14.257811 c
58.811874 13.61328 57.981796 12.955729 56.77737 12.285155 c
55.566433 11.373697 54.817734 10.71289 54.531277 10.302733 c
54.016953 9.62565 53.759792 8.886718 53.759792 8.085937 c
53.759792 7.454426 53.909531 6.881509 54.209011 6.367186 c
54.508492 5.852864 54.933289 5.44433 55.48341 5.141586 c
56.033531 4.838842 56.630863 4.687476 57.27541 4.687486 c
57.952492 4.687486 58.587257 4.858385 59.179707 5.200181 c
59.772156 5.541978 60.400421 6.165345 61.064507 7.070282 c
59.882908 7.958951 l
59.342545 7.242805 58.880302 6.769173 58.496189 6.538053 c
58.112076 6.306933 57.692142 6.191373 57.236389 6.191373 c
56.656963 6.191373 56.181702 6.368782 55.810608 6.723599 c
55.439514 7.078417 55.253967 7.512984 55.253967 8.0273 c
55.253967 8.3398 55.319073 8.645789 55.44928 8.945269 c
55.579487 9.244748 55.820374 9.563758 56.17194 9.902299 c
56.360741 10.091101 56.985741 10.576127 58.04694 11.357377 c
59.29694 12.281857 60.154686 13.04683 60.620182 13.652299 c
61.085678 14.257768 61.318424 14.921834 61.31842 15.644499 c
61.31842 16.699186 60.919659 17.613899 60.122131 18.388639 c
59.324604 19.16338 58.356171 19.550745 57.216831 19.550739 c
56.331413 19.550739 55.530632 19.316364 54.814487 18.847614 c
54.098343 18.378864 53.440777 17.594364 52.841789 16.494114 c
52.841797 16.494101 l
h
67.705055 17.929701 m
67.027969 18.294285 66.363907 18.323582 65.712868 18.017591 c
64.918594 17.412123 64.540993 16.549492 64.580055 15.429701 c
64.580055 10.898401 l
67.119156 10.898401 l
67.119156 9.716802 l
64.570358 9.716802 l
64.570358 4.541002 l
63.183659 4.541002 l
63.183659 15.664002 l
63.170639 16.445251 63.349674 17.161398 63.720768 17.812439 c
64.332748 18.847595 65.166084 19.39447 66.220764 19.453064 c
66.780663 19.472595 67.418678 19.345642 68.134827 19.072205 c
68.024147 18.798767 67.88092 18.417908 67.705139 17.929626 c
67.705055 17.929701 l
h
75.390625 8.203 m
77.037758 8.203 78.404945 8.798703 79.492188 9.990109 c
80.475258 11.083859 80.966797 12.376177 80.966797 13.867063 c
80.966797 15.357947 80.445961 16.661648 79.404297 17.778162 c
78.362633 18.894676 77.024727 19.452944 75.390594 19.452963 c
73.749969 19.452963 72.410454 18.894695 71.37204 17.778158 c
70.333626 16.661621 69.81443 15.357922 69.814438 13.867058 c
69.814438 12.382683 70.305977 11.09362 71.289047 9.99987 c
72.376289 8.801953 73.743477 8.202995 75.39061 8.202995 c
75.390625 8.203 l
h
75.390625 9.551 m
74.251305 9.551 73.271484 9.974176 72.451172 10.820531 c
71.630859 11.666885 71.220695 12.689018 71.220673 13.886931 c
71.220673 14.66167 71.407845 15.385954 71.782196 16.059782 c
72.156548 16.73361 72.662743 17.251177 73.300797 17.612482 c
73.93885 17.973787 74.635445 18.154451 75.390594 18.154472 c
76.158821 18.154472 76.860321 17.973808 77.495087 17.61248 c
78.129852 17.251152 78.632782 16.733585 79.003883 16.05978 c
79.374985 15.385975 79.560532 14.661675 79.560524 13.88688 c
79.560524 12.688963 79.150368 11.666828 78.330055 10.820474 c
77.509743 9.974119 76.529907 9.550953 75.390556 9.550974 c
75.390625 9.551 l
h
93.89666 10.7031 m
92.802856 11.38669 l
91.858849 10.12367 90.569786 9.492159 88.935669 9.492159 c
87.627075 9.492159 86.541466 9.912081 85.678833 10.751925 c
84.8162 11.591768 84.384903 12.613902 84.384933 13.818325 c
84.384933 14.599575 84.583504 15.33688 84.980637 16.030239 c
85.377769 16.723598 85.921402 17.259066 86.611534 17.636639 c
87.301666 18.014212 88.076401 18.203016 88.935738 18.203049 c
90.517769 18.203049 91.806831 17.578049 92.802925 16.328049 c
93.896729 17.040939 l
93.382408 17.809168 92.693932 18.403244 91.831299 18.823166 c
90.968666 19.243088 89.983971 19.453049 88.877197 19.453047 c
87.191002 19.453047 85.789635 18.915937 84.673096 17.841719 c
83.556557 16.7675 82.998291 15.462167 82.998299 13.925718 c
82.998299 12.884051 83.260345 11.918882 83.784431 11.03021 c
84.308517 10.141539 85.024651 9.448172 85.932831 8.95011 c
86.841011 8.452049 87.861511 8.203026 88.994331 8.20304 c
89.697456 8.20304 90.379425 8.310462 91.04023 8.525306 c
91.701035 8.74015 92.262573 9.021727 92.724831 9.370036 c
93.187088 9.718346 93.577721 10.16268 93.896729 10.703036 c
93.89666 10.7031 l
h
96.513702 4.59 m
97.900406 4.59 l
97.900406 13.047 l
102.851608 8.7306 l
104.882912 8.7306 l
100.400513 12.8029 l
105.224716 19.443501 l
103.271614 19.443501 l
99.052811 13.681801 l
97.900513 14.629071 l
97.900513 19.443571 l
96.513809 19.443571 l
96.513809 4.589571 l
96.513702 4.59 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
